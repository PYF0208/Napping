@model IEnumerable<Napping_PJ.Areas.Admin.Models.RoomsViewModel>

@{
	ViewData["Title"] = "Index";
}
@section Styles
	{
		<style>
			thead {
				background-color: maroon;
				color: aliceblue;
			}
		</style>
}


<div id="app" class="container">

	<div class="form-group">
		@*篩選欄位*@
		<div class="row" style="width:50%;margin-left:auto;margin-right:0px">
			<label class="col-md-4">關鍵字:</label>
			<input class="col-md-8 form-control" placeholder="請輸入篩選關鍵字"
				   v-model="filter" @@keyup="getRooms">
		</div>
	</div>
	<div class="form-group">
		@*新增按鍵*@
		<button type="button" @@click="showInsertPage" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#modalId">
			新增加購服務選項
		</button>

	</div>
	<div class="form-group">
		<table class="table table-striped table-hover">
			<thead>
				<tr>
					<td>編輯</td>
					<td>RoomId</td>
					<td>HotelId</td>
					<td>Type</td>
					<td>Price</td>
					<td>MaxGuests</td>
				</tr>
			</thead>
			<tbody>
				<tr v-for="item in RoomsViewModel">
					<template v-if="item.Edit==true">

						<td>
							<button class="btn btn-success" @@click="update(item)">修改</button>
							<button class="btn btn-warning" @@click="cancel">取消</button>
						</td>
						<td>{{item.roomId}}</td>
						<td><input v-model="item.hotelId" /> </td>
						<td><input v-model="item.type" /> </td>
						<td><input v-model="item.price" /> </td>
						<td><input v-model="item.maxGuests" /> </td>



					</template>
					<template v-else>

						<td>
							<button class="btn btn-primary" @@click="edit(item.roomId)">編輯</button>
							<button class="btn btn-danger" @@click="deleteRooms(item.roomId)">刪除</button>
						</td>
						<td>{{item.roomId}}</td>
						<td>{{item.hotelId}}</td>
						<td>{{item.type}}</td>
						<td>{{item.price}}</td>
						<td>{{item.maxGuests}}</td>


					</template>
				</tr>
			</tbody>
		</table>
	</div>
	<div class="form-group">
		@*新增加購服務選項畫面*@
		<div class="modal fade" id="insertPage" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog" aria-labelledby="modalTitleId" aria-hidden="true">
			<div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="modalTitleId">新增加購服務選項</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">

						<div class="form-group">
							<label class="form-label">hotelId:</label>
							<input class="form-control" v-model="hotelId" />
						</div>
						<div class="form-group">
							<label class="form-label">type:</label>
							<input class="form-control" v-model="type" />@* v-model="price"*@
						</div>
						<div class="form-group">
							<label class="form-label">price:</label>
							<input class="form-control" v-model="price" />@* v-model="price"*@
						</div>
						<div class="form-group">
							<label class="form-label">maxGuests:</label>
							<input class="form-control" v-model="maxGuests" />@* v-model="price"*@
						</div>


					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
						<button type="button" class="btn btn-primary" @@click="createRooms">新增</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts{
		<script src="https://unpkg.com/vue@2.6.14/dist/vue.min.js"></script>
		<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
		<script>
			var app = new Vue({
				el: "#app",
				data: {
					RoomsViewModel: [],
					filter:"",
					hotelId:"",
					type: "",
					price: "",
					maxGuests: "",
					originalHotelId:"",
					originalType: "",
					originalPrice: "",
					originalMaxGuests: "",
				},
				mounted: function () {
					let _this=this;
					_this.getRooms();
				},
				methods: {
					//getRooms: function () {
					//	axios.get("Rooms/GetRooms")
					//		.then(response => {
					//			this.RoomsViewModel = response.data;
					//		})
					//		.catch(error => {
					//			console.log(error);
					//		});
					getRooms: function () {
						let _this = this;
						var request = {};
						request.RoomId = isNaN(Number(_this.filter)) ? -1 : Number(_this.filter);
						request.HotelId = request.Type = request.Price = request.MaxGuests = _this.filter;
						axios.post('Rooms/FilterRooms', request)
							.then(function (response) {
								_this.RoomsViewModel = response.data;
								var RoomList = [];
								for (var i = 0; i < _this.RoomsViewModel.length; i++) {
									var item = _this.RoomsViewModel[i];
									item.Edit = false;
									RoomList.push(item);
								}
								_this.RoomsViewModel = RoomList;
							})
							.catch(function (error) {
								console.log(error);
							});
					},
					showInsertPage: function () {
						$('#insertPage').modal('show');
					},
					createRooms: function () {
						let _this=this;
						var request = {
							RoomId:0,
							HotelId: _this.hotelId,
							Type: _this.type,
							Price: _this.price,
							MaxGuests: _this.maxGuests,
						};
						axios.post("Rooms/RoomCreate", request)
							.then(response => {
								alert(response.data);
								$("#insertPage").modal('hide');
								_this.getRooms();
							})
					},
					update: function (item) {
						let _this=this
						var request = {
							RoomId:item.roomId,
							HotelId: item.hotelId,
							Type: item.type,
							Price: item.price,
							MaxGuests: item.maxGuests,
						};
						axios.post(`Rooms/Edit/${item.roomId}`, request)
							.then(response => {
								alert(response.data)
								this.getRooms();
							});
					},
					cancel: function () {
						let _this=this;
						var RoomList=[];
						for (var i = 0; i < _this.RoomsViewModel.length; i++){
							var item=_this.RoomsViewModel[i];
							if(item.Edit==true){
								item.Edit=false;

								//item.hotelId = _this.originalHotelId;
								item.type = _this.originalType;
								item.price=_this.originalPrice;
								item.maxGuests=_this.originalMaxGuests;
							}
							RoomList.push(item);
						}
						_this.RoomsViewModel=RoomList;
					},
					edit: function (roomId) {
						let _this=this;
						var RoomList=[];
						for (var i = 0; i < _this.RoomsViewModel.length; i++) {
							var item = _this.RoomsViewModel[i];
							if (roomId == item.roomId) {
								item.Edit = true;
								_this.originalType = item.type;
								_this.originalPrice = item.price;
								_this.originalMaxGuests = item.maxGuests;
							} RoomList.push(item);
						}
						_this.RoomsViewModel=RoomList;
					},
					deleteRooms: function (roomId) {
						let _this=this;
						var ret = confirm('確定要刪除嗎?');
						if (ret==true) {
							axios.delete(`Rooms/DeleteConfirmed/${roomId}`)
								.then(response => {
									alert(response.data);
									_this.getRooms();
								});

						}
					},
				}
			});
		</script>
}
