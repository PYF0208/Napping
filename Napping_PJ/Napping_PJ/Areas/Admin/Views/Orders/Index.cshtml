@model IEnumerable<Napping_PJ.Areas.Admin.Models.OrdersViewModel>

@{
    ViewData["Title"] = "Index";
}

@section Styles{
    <link href="~/css/table.css" rel="stylesheet" />
}
<h1 class="mt-3">訂單管理</h1>

<div id="app" class="container">

    

    <div class="table-responsive">
        <div class="table-wrapper">
            @*藍藍綠綠那一塊*@
            <div class="table-title">
                <div class="row">
                    @*如果想來點查詢功能<input type="text" class="form-control" placeholder="請輸入篩選關鍵字" v-model="Filter" @@keyup="filterEmployeeDTOes" />*@
                    <div>
                        <button class="btn btn-info" data-toggle="modal" @@click="showInsertPage"><span><i class="fa-solid fa-circle-plus"></i> 新增</span></button>
                    </div>
                </div>
            </div>
            @*藍藍綠綠那一塊*@
            @*表格標題*@
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <td>訂單ID</td>
                        <td>會員帳號</td>
                        <td>付款方式ID</td>
                        <td>日期</td>
                        <td>操作</td>
                    </tr>
                </thead>
                @*表格標題*@
                @*表格內容*@
                <tbody>
                    <tr v-for="item in OrdersViewModel ">
                        @*v-for="item in FeatureVMs"*@
                        <td>{{item.orderId}}</td>
                        <td>{{ item.customerName,}},ID:{{item.customerId}}</td>
                        <td>{{item.customerId}}</td>
                        <td>{{item.paymentId}}</td>
                        <td>{{item.date}}</td>
                        <td>
                            <a class="btn edit"><i class="fa-solid fa-pen" title="Edit"></i></a>
                            <a class="btn delete"><i class="fa-solid fa-trash-can" title="Delete"></i></a>
                        </td>
                    </tr>
                </tbody>
                @*表格內容*@
            </table>

        </div>
        @*編輯用的互動視窗*@
        <div class="form-group">
            <div class="modal fade" id="editModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog" aria-labelledby="modalTitleId" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalTitleId">編輯</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label class="form-label">ID</label>
                                <input class="form-control" readonly />
                            </div>
                            <div class="form-group">
                                <label class="form-label">日期</label>
                                <input class="form-control" type="date" />
                            </div>
                            <div class="form-group">
                                <label class="form-label">數字</label>
                                <input class="form-control" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                            <button type="button" class="btn btn-primary">儲存</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*新增用的互動視窗*@
        <div class="form-group">
            <div class="modal fade" id="insertPage" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog" aria-labelledby="modalTitleId" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalTitleId">新增</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <select class="form-control" v-model="customerId" >
                                <option v-for="item in MemberViewModel ">{{item.name}}</option>
                            </select>
                        
                            <div class="form-group">
                                <label class="form-label">日期</label>
                                <input class="form-control" type="datetime-local" />
                            </div>


                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                            <button type="button" class="btn btn-primary">新增</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
    {
    <script src="~/lib/vue/vue.min.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>
    <script>
        var data = new Vue({
            el: "#app",
            data: {
                OrdersViewModel: [],
                MemberViewModel: [],
                CurrencyViewModel: [],
                date: "",
                currencyId: "",
                customerId: "",
                orderId: "",
                paymentId: "",
                customerName:[],
            },
            mounted: function () {
                let _this = this;
                _this.getOrder();
                _this.getMember();
            },
            methods: {
                getCurrency: function () {
                    let _this = this;
                    axios.get("Orders/GetCurrency")
                        .then(function (response) {

                            //alert(JSON.stringify(response.data))
                            _this.MemberViewModel = response.data;
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },
                getMember: function () {
                    let _this = this;
                    axios.get("Orders/GetMember")
                        .then(function (response) {

                            //alert(JSON.stringify(response.data))
                            _this.MemberViewModel = response.data;
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },
                getOrder: function () {
                    let _this = this;
                    axios.get("Orders/GetOrder")
                        .then(function (response) {

                            //alert(JSON.stringify(response.data))
                            _this.OrdersViewModel = response.data;
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },
                showInsertPage: function () {
                    $('#insertPage').modal('show');
                },
                createProfit: function (item) {

                    let _this = this;
                    var request = {
                        orderId: 0,
                        currencyId: 0,
                        customerId: 0,
                        paymentId: 0,
                        date: _this.date,
                    };
                    axios.post("Orders/Create", request)
                        .then(res => {
                            alert(res.data);
                            $("#insertPage").modal('hide');
                            _this.getOrder();
                        })
                },

                cancel: function () {
                    //alert("cancel");
                    let _this = this;
                    var request = [];
                    for (var i = 0; i < _this.OrdersViewModel.length; i++) {
                        var item = _this.OrdersViewModel[i];
                        if (item.Edit == true) {
                            item.Edit = false;
                            item.date = _this.date;
                            item.number = _this.number;
                        }
                        request.push(item);
                    }
                    _this.OrdersViewModel = request;
                },
                filter: function () {
                    let _this = this;
                    var request = {};
                    request.HotelId = parseInt(Number(_this.filter)) ? -1 : Number(_this.filter);
                    request.Name = _this.filter,
                        request.Star = _this.filter,
                        request.Image = _this.filter,
                        request.ContactName = _this.filter,
                        request.Phone = _this.filter,
                        request.Email = _this.filter,
                        request.City = _this.filter,
                        request.Region = _this.filter,
                        request.Address = _this.filter;
                    axios.post("Hotels/FilterExtraServices", request)
                        .then(function (response) {
                            _this.HotelsViewModel = response.data;
                            var HotelsViewModelList = [];
                            for (var i = 0; i < _this.HotelsViewModel.length; i++) {
                                var item = _this.HotelsViewModel[i];
                                item.Edit = false;
                                HotelsViewModelList.push(item);
                            }
                            _this.HotelsViewModelList = HotelsViewModelList;
                        });
                },
                update: function () {
                    //alert("update");
                    let _this = this;
                    var request = {
                        profitId: _this.profitId,
                        date: _this.date,
                        number: _this.number,
                    };
                    axios.put(`Profits/Edit?ID=${_this.profitId}`, request)
                        .then(response => {
                            alert(response.data);
                            _this.getProfit();
                            $("#editModal").modal("hide");
                        });
                },
                edit: function (item) {
                    //alert("edit");
                    $("#editModal").modal("show");
                    let _this = this;
                    _this.profitId = item.profitId;
                    _this.date = item.date;
                    _this.number = item.number;
                },
                deleteProfitService: function (profitId) {
                    //alert("delete");
                    let _this = this;
                    var x = _this.ProfitViewModel.find(h => h.profitId == profitId)

                    var ret = confirm(`您確定要將ID:${x.profitId}刪除嗎?`);
                    if (ret == true) {
                        axios.delete(`Profits/DeleteConfirmed?ID=${profitId}`)
                            .then(response => {
                                var y = _this.ProfitViewModel.findIndex(h => h.profitId == profitId)
                                _this.ProfitViewModel.splice(y, 1)
                            });
                    }
                },
            }
        });
    </script>
}