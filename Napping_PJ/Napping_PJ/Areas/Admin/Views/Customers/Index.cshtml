@model List<Napping_PJ.Areas.Admin.Models.CustomersViewModel>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Bootstrap CRUD Data Table for Database with Modal Form</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto|Varela+Round">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link href="~/lib/font-awesome/css/all.min.css" rel="stylesheet" />
    <script src="~/lib/font-awesome/js/all.min.js"></script>
    @*<script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>*@
    <style>
        body {
            color: #566787;
            background: #f5f5f5;
            font-family: 'Varela Round', sans-serif;
            font-size: 13px;
            width: max-content;
        }

        #layoutSidenav_content {
            overflow: auto;
        }

        .table-responsive {
            margin: 30px 0;
        }

        .table-wrapper {
            background: #fff;
            padding: 20px 25px;
            border-radius: 3px;
            min-width: 1000px;
            box-shadow: 0 1px 1px rgba(0,0,0,.05);
        }

        .table-title {
            padding-bottom: 15px;
            background: #435d7d;
            color: #fff;
            padding: 16px 30px;
            min-width: 100%;
            margin: -20px -25px 10px;
            border-radius: 3px 3px 0 0;
        }

            .table-title h2 {
                margin: 5px 0 0;
                font-size: 24px;
            }

            .table-title .btn-group {
                float: right;
            }

            .table-title .btn {
                color: #fff;
                float: right;
                font-size: 13px;
                border: none;
                min-width: 50px;
                border-radius: 2px;
                border: none;
                outline: none !important;
                margin-left: 10px;
            }

                .table-title .btn i {
                    float: left;
                    font-size: 21px;
                    margin-right: 5px;
                }

                .table-title .btn span {
                    float: left;
                    margin-top: 2px;
                }

        table.table tr th, table.table tr td {
            border-color: #e9e9e9;
            padding: 12px 15px;
            vertical-align: middle;
        }

            table.table tr th:first-child {
                width: 60px;
            }

            table.table tr th:last-child {
                width: 100px;
            }

        table.table-striped tbody tr:nth-of-type(odd) {
            background-color: #fcfcfc;
        }

        table.table-striped.table-hover tbody tr:hover {
            background: #f5f5f5;
        }

        table.table th i {
            font-size: 13px;
            margin: 0 5px;
            cursor: pointer;
        }

        table.table td:last-child i {
            opacity: 0.9;
            font-size: 22px;
            margin: 0 5px;
        }

        table.table td a {
            font-weight: bold;
            color: #566787;
            display: inline-block;
            text-decoration: none;
            outline: none !important;
        }

            table.table td a:hover {
                color: #2196F3;
            }

            table.table td a.edit {
                color: #FFC107;
            }

            table.table td a.delete {
                color: #F44336;
            }

        table.table td i {
            font-size: 19px;
        }

        table.table .avatar {
            border-radius: 50%;
            vertical-align: middle;
            margin-right: 10px;
        }

        .pagination {
            float: right;
            margin: 0 0 5px;
        }

            .pagination li a {
                border: none;
                font-size: 13px;
                min-width: 30px;
                min-height: 30px;
                color: #999;
                margin: 0 2px;
                line-height: 30px;
                border-radius: 2px !important;
                text-align: center;
                padding: 0 6px;
            }

                .pagination li a:hover {
                    color: #666;
                }

            .pagination li.active a, .pagination li.active a.page-link {
                background: #03A9F4;
            }

                .pagination li.active a:hover {
                    background: #0397d6;
                }

            .pagination li.disabled i {
                color: #ccc;
            }

            .pagination li i {
                font-size: 16px;
                padding-top: 6px
            }

        .hint-text {
            float: left;
            margin-top: 10px;
            font-size: 13px;
        }
        /* Custom checkbox */
        .custom-checkbox {
            position: relative;
        }

            .custom-checkbox input[type="checkbox"] {
                opacity: 0;
                position: absolute;
                margin: 5px 0 0 3px;
                z-index: 9;
            }

            .custom-checkbox label:before {
                width: 18px;
                height: 18px;
            }

            .custom-checkbox label:before {
                content: '';
                margin-right: 10px;
                display: inline-block;
                vertical-align: text-top;
                background: white;
                border: 1px solid #bbb;
                border-radius: 2px;
                box-sizing: border-box;
                z-index: 2;
            }

            .custom-checkbox input[type="checkbox"]:checked + label:after {
                content: '';
                position: absolute;
                left: 6px;
                top: 3px;
                width: 6px;
                height: 11px;
                border: solid #000;
                border-width: 0 3px 3px 0;
                transform: inherit;
                z-index: 3;
                transform: rotateZ(45deg);
            }

            .custom-checkbox input[type="checkbox"]:checked + label:before {
                border-color: #03A9F4;
                background: #03A9F4;
            }

            .custom-checkbox input[type="checkbox"]:checked + label:after {
                border-color: #fff;
            }

            .custom-checkbox input[type="checkbox"]:disabled + label:before {
                color: #b8b8b8;
                cursor: auto;
                box-shadow: none;
                background: #ddd;
            }
        /* Modal styles */
        .modal .modal-dialog {
            max-width: 400px;
        }

        .modal .modal-header, .modal .modal-body, .modal .modal-footer {
            padding: 20px 30px;
        }

        .modal .modal-content {
            border-radius: 3px;
            font-size: 14px;
        }

        .modal .modal-footer {
            background: #ecf0f1;
            border-radius: 0 0 3px 3px;
        }

        .modal .modal-title {
            display: inline-block;
        }

        .modal .form-control {
            border-radius: 2px;
            box-shadow: none;
            border-color: #dddddd;
        }

        .modal textarea.form-control {
            resize: vertical;
        }

        .modal .btn {
            border-radius: 2px;
            min-width: 100px;
        }

        .modal form label {
            font-weight: normal;
        }
    </style>
</head>
<body>
    <div id="app">
        <div class="container-fluid">
            <div class="table-responsive">
                <div class="table-wrapper">
                    <div class="table-title">
                        <div class="row">
                            <div class="col-sm-3">
                                <h2>Manage <b>Customers</b></h2>
                            </div>
                            <div class="col-sm-2">
                                <input class="form-control" v-model="filterKeyword" placeholder="輸入篩選關鍵字" @@keyup="skipPage(PageIndex)" />
                            </div>
                            <div class="col-sm-3">
                                <a class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addEmployeeModal" @@click="validFileds(newCustomer)"><i class="material-icons">&#xE147;</i> <span>Add New Employee</span></a>
                                <a data-bs-target="#deleteEmployeeModal" class="btn btn-danger" data-bs-toggle="modal"><i class="material-icons">&#xE15C;</i> <span>Delete</span></a>
                            </div>
                        </div>
                    </div>
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" id="selectAll">
                                        <label for="selectAll"></label>
                                    </span>
                                </th>
                                <th></th>
                                <th>customerId</th>
                                <th>email</th>
                                <th>name</th>
                                <th>birthday</th>
                                <th>phone</th>
                                <th>gender</th>
                                <th>city</th>
                                <th>region</th>
                                <th>country</th>
                                <th>level</th>
                                <th>locked</th>
                            </tr>
                        </thead>
                        <tbody>
                            <template v-if="CustomersViewModels.length > 0">
                                <tr v-for="customer in CustomersViewModels">
                                    <td>
                                        <span class="custom-checkbox">
                                            <input type="checkbox" id="checkbox2" name="options[]" value="1">
                                            <label for="checkbox2"></label>
                                        </span>
                                    </td>
                                    <td>
                                        <a data-bs-target="#editEmployeeModal" class="edit" data-bs-toggle="modal"><i class="material-icons" data-bs-toggle="tooltip" title="Edit" @@click="setSelectedCustomer(customer),validFileds(SelectedCustomer)">&#xE254;</i></a>
                                        <a data-bs-target="#deleteEmployeeModal" class="delete" data-bs-toggle="modal"><i class="material-icons" data-bs-toggle="tooltip" title="Delete" @@click="setSelectedCustomer(customer)">&#xE872;</i></a>
                                    </td>
                                    <td><span>{{customer.customerId}}</span></td>
                                    <td><span>{{customer.email}}</span></td>
                                    <td><span>{{customer.name}}</span></td>
                                    <td><span>{{customer.birthday}}</span></td>
                                    <td><span>{{customer.phone}}</span></td>
                                    <td><span>{{customer.gender? "男性" : "女性"}}</span></td>
                                    <td><span>{{CityList.find(C => C.countycode == customer.city)?.countyname}}</span></td>
                                    <td><span>{{customer.TownList.find(T => T.towncode == customer.region)?.townname}}</span></td>
                                    <td><span>{{customer.country}}</span></td>
                                    <td><span>{{LevelList.find(l => l.levelId == customer.levelId)?.name}}</span></td>
                                    <td><span>{{customer.locked? "鎖定" : "解鎖"}}</span></td>
                                </tr>
                            </template>
                            <template v-else>
                                無資料
                            </template>
                        </tbody>
                    </table>
                    <div class="clearfix">
                        <div class="hint-text">Showing <b>5</b> out of <b>@ViewBag.total</b> entries</div>
                        <ul class="pagination">
                            <li :class="{'page-item':true,'disabled' :minPage}"><a @@click="subPage">Previous</a></li>
                            <li v-for="n in MaxPage" :class="{'page-item': true, 'active': isThisPage(n)}"><a class="page-link" @@click="skipPage(n)">{{n}}</a></li>
                            <li :class="{'page-item':true,'disabled' :maxPage}"><a @@click="plusPage">Next</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- Edit Modal HTML -->
        <div id="addEmployeeModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form>
                        <div class="modal-header">
                            <h4 class="modal-title">Edit Employee</h4>
                            <button type="button" class="close" data-bs-dismiss="modal" aria-hidden="true">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <template v-if="'email' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.email">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>Email</label>
                                </template>
                                <input v-model="newCustomer.email" type="email" class="form-control" required @@keyup="validFileds(newCustomer)">
                            </div>
                            <div class="form-group">
                                <template v-if="'name' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.name">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>name</label>
                                </template>
                                <input v-model="newCustomer.name" type="text" class="form-control" required @@keyup="validFileds(newCustomer)">
                            </div>
                            <div class="form-group">
                                <template v-if="'birthday' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.birthday">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>birthday</label>
                                </template>
                                <input v-model="newCustomer.birthday" type="date" class="form-control" required @@change="validFileds(newCustomer)">
                            </div>
                            <div class="form-group">
                                <template v-if="'phone' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.phone">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>phone</label>
                                </template>
                                <input v-model="newCustomer.phone" type="tel" class="form-control" required @@keyup="validFileds(newCustomer)" />
                            </div>
                            <div class="form-group">
                                <template v-if="'gender' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.gender">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>gender</label>
                                </template>
                                <select class="form-control" v-model="newCustomer.gender" @@change="validFileds(newCustomer)">
                                    <option :value="false">女性</option>
                                    <option :value="true">男性</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <template v-if="'city' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.city">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>city</label>
                                </template>
                                <select v-model="newCustomer.city" class="form-control" @@change="getTownList(newCustomer),validFileds(newCustomer)">
                                    <option v-for="city in CityList" :value="city.countycode">{{city.countyname}}</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <template v-if="'region' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.region">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>region</label>
                                </template>
                                <select v-model="newCustomer.region" class="form-control" @@change="validFileds(newCustomer)">
                                    <option v-for="town in newCustomer.TownList" :value="town.towncode">{{town.townname}}</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <template v-if="'country' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.country">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>country</label>
                                </template>
                                <input class="form-control" v-model="newCustomer.country" @@keyup="validFileds(newCustomer)" />
                            </div>
                            <div class="form-group">
                                <template v-if="'levelId' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.levelId">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>level</label>
                                </template>
                                <select class="form-control" v-model="newCustomer.levelId" @@change="validFileds(newCustomer)">
                                    <option v-for="level in LevelList" :value="level.levelId">{{level.name}}</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <template v-if="'locked' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.locked">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>locked</label>
                                </template>
                                <input type="checkbox" v-model="newCustomer.locked" @@change="validFileds(newCustomer)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-default" data-bs-dismiss="modal" value="Cancel">
                            <input type="button" :class="{'btn':true, 'btn-info':true, 'disabled': newCreateBtn }" data-bs-dismiss="modal" value="Save" @@click="createCustomer">
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <!-- Edit Modal HTML -->
        <div id="editEmployeeModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form>
                        <div class="modal-header">
                            <h4 class="modal-title">Edit Employee</h4>
                            <button type="button" class="close" data-bs-dismiss="modal" aria-hidden="true">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <template v-if="'email' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.email">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>Email</label>
                                </template>
                                <span class="form-control" required>{{SelectedCustomer.email}}</span>
                            </div>
                            <div class="form-group">
                                <template v-if="'name' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.name">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>name</label>
                                </template>
                                <input v-model="SelectedCustomer.name" type="text" class="form-control" required @@keyup="validFileds(SelectedCustomer)">
                            </div>
                            <div class="form-group">
                                <template v-if="'birthday' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.birthday">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>birthday</label>
                                </template>
                                <input v-model="SelectedCustomer.birthday" type="date" class="form-control" required @@change="validFileds(SelectedCustomer)">
                            </div>
                            <div class="form-group">
                                <template v-if="'phone' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.phone">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>phone</label>
                                </template>
                                <input v-model="SelectedCustomer.phone" type="tel" class="form-control" required @@keyup="validFileds(SelectedCustomer)" />
                            </div>
                            <div class="form-group">
                                <template v-if="'gender' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.gender">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>gender</label>
                                </template>
                                <select class="form-control" v-model="SelectedCustomer.gender" @@change="validFileds(SelectedCustomer)">
                                    <option :value="false">女性</option>
                                    <option :value="true">男性</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <template v-if="'city' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.city">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>city</label>
                                </template>
                                <select v-model="SelectedCustomer.city" class="form-control" @@change="getTownList(SelectedCustomer),validFileds(SelectedCustomer)">
                                    <option v-for="city in CityList" :value="city.countycode">{{city.countyname}}</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <template v-if="'region' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.region">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>region</label>
                                </template>
                                <select v-model="SelectedCustomer.region" class="form-control" @@change="validFileds(SelectedCustomer)">
                                    <option v-for="town in SelectedCustomer.TownList" :value="town.towncode">{{town.townname}}</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <template v-if="'country' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.country">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>country</label>
                                </template>
                                <input class="form-control" v-model="SelectedCustomer.country" @@keyup="validFileds(SelectedCustomer)" />
                            </div>
                            <div class="form-group">
                                <template v-if="'levelId' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.levelId">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>level</label>
                                </template>
                                <select class="form-control" v-model="SelectedCustomer.levelId" @@change="validFileds(SelectedCustomer)">
                                    <option v-for="level in LevelList" :value="level.levelId">{{level.name}}</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <template v-if="'locked' in newCustomerError">
                                    <span class="badge text-bg-danger me-1" v-for="err in newCustomerError.locked">{{err}}</span>
                                </template>
                                <template v-else>
                                    <label>locked</label>
                                </template>
                                <input type="checkbox" v-model="SelectedCustomer.locked" @@change="validFileds(SelectedCustomer)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-default" data-bs-dismiss="modal" value="Cancel">
                            <input type="button" :class="{'btn' : true,'btn-info':true,'disabled':newCreateBtn}" data-bs-dismiss="modal" value="Save" @@click="editCustomer">
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <!-- Delete Modal HTML -->
        <div id="deleteEmployeeModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form>
                        <div class="modal-header">
                            <h4 class="modal-title">Delete Employee</h4>
                            <button type="button" class="close" data-bs-dismiss="modal" aria-hidden="true">&times;</button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete these Records?</p>
                            <p class="text-warning"><small>This action cannot be undone.</small></p>
                        </div>
                        <div class="modal-footer">
                            <input type="button" class="btn btn-default" data-bs-dismiss="modal" value="Cancel">
                            <input type="button" class="btn btn-danger" data-bs-dismiss="modal" value="Delete" @@click="deleteCustomer">
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
@section Scripts{
    <script src="~/lib/vue/vue.min.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>
    <script>
        var VueApp = new Vue({
            el: '#app',
            data: {
                PageIndex: 1,
                MaxPage: @ViewBag.maxPage,
                CustomersViewModels: [],
                CityList: [],
                LevelList: [],
                SelectedCustomer: {
                    name: null,
                    birthday: null,
                    phone: null,
                    gender: null,
                    city: null,
                    region: null,
                    country: null,
                    email: null,
                    levelId: null,
                    locked: null,
                },
                newCustomer: {
                    customerId: 0,
                    name: null,
                    birthday: null,
                    phone: null,
                    gender: null,
                    city: null,
                    region: null,
                    country: null,
                    email: null,
                    levelId: null,
                    locked: null,
                },
                newCustomerError: {},
                filterKeyword: '',
            },
            mounted: async function () {
                var _this = this;
                await _this.skipPage(_this.PageIndex);
                await _this.getCityList();
                await _this.getLevelList();
            },
            methods: {
                getCityList: async function () {
                    var _this = this;
                    await axios.get(`https://api.nlsc.gov.tw/other/ListCounty`)
                        .then(response => {
                            let parser = new DOMParser();
                            let xmlDoc = parser.parseFromString(response.data, "text/xml");

                            let items = xmlDoc.getElementsByTagName("countyItem");
                            _this.CityList = [];

                            for (let i = 0; i < items.length; i++) {
                                let item = items[i];
                                let countyItem = {
                                    countycode: item.getElementsByTagName("countycode")[0].textContent,
                                    countyname: item.getElementsByTagName("countyname")[0].textContent,
                                    countycode01: item.getElementsByTagName("countycode01")[0].textContent,
                                };
                                _this.CityList.push(countyItem);
                            }
                            //console.log(_this.CityList);
                        })
                        .catch(error => { console.log(error.response.data) })
                },
                getTownList: async function (customer) {
                    var _this = this;
                    await axios.get(`https://api.nlsc.gov.tw/other/ListTown/${customer.city}`)
                        .then(response => {
                            let parser = new DOMParser();
                            let xmlDoc = parser.parseFromString(response.data, "text/xml");

                            let items = xmlDoc.getElementsByTagName("townItem");

                            var tempTownList = [];
                            for (let i = 0; i < items.length; i++) {
                                let item = items[i];
                                let townItem = {
                                    towncode: item.getElementsByTagName("towncode")[0].textContent,
                                    townname: item.getElementsByTagName("townname")[0].textContent,
                                };
                                tempTownList.push(townItem);
                            }
                            _this.$set(customer, 'TownList', tempTownList);
                        })
                        .catch(error => { console.log(error.data) })
                },
                getLevelList: async function () {
                    var _this = this;
                    await axios.post(`Customers/GetLevealList`)
                        .then(response => {
                            //console.log(response.data)
                            _this.LevelList = response.data;
                        })
                        .catch(error => { console.log(error.response.data) })
                },
                setSelectedCustomer: function (customer) {
                    var _this = this;
                    _this.SelectedCustomer = customer;

                },
                editCustomer: async function () {
                    var _this = this;
                    await axios.post(`Customers/EditCustomer`, _this.SelectedCustomer)
                        .then(response => { console.log('編輯成功') })
                        .catch(error => { console.log('編輯失敗') })
                },
                deleteCustomer: async function () {
                    var _this = this;
                    //刪除後端資料
                    await axios.post(`Customers/RemoveCuctomer`, _this.SelectedCustomer)
                        .then(response => {
                            //刪除前端DOM
                            var index = _this.CustomersViewModels.findIndex(c => c == _this.SelectedCustomer)
                            _this.CustomersViewModels.splice(index, 1)
                            console.log('刪除成功')
                        })
                        .catch(error => { console.log(error.response.data) })

                },
                createCustomer: async function () {
                    var _this = this;
                    //console.log(_this.SelectedCustomer)
                    await axios.post(`Customers/CreateCustomer`, _this.newCustomer)
                },
                validFileds: async function (customer) {
                    var _this = this;
                    axios.post(`Customers/ValidFileds`, customer)
                        .then(response => {
                            //console.log('ok');
                            _this.newCustomerError = response.data;
                        })
                        .catch(error => {
                            //console.log(error.response.data);
                            _this.newCustomerError = error.response.data;
                        });
                },
                plusPage: function () {
                    var _this = this;
                    _this.PageIndex < _this.MaxPage ? _this.PageIndex++ : _this.PageIndex;
                    console.log(_this.PageIndex);
                    _this.skipPage(_this.PageIndex);
                },
                subPage: function () {
                    var _this = this;
                    _this.PageIndex > 1 ? _this.PageIndex-- : _this.PageIndex;
                    console.log(_this.PageIndex);
                    _this.skipPage(_this.PageIndex);
                },
                skipPage: async function (n) {
                    var _this = this;
                    _this.PageIndex = n;
                    try {
                        let response = await axios.get(`Customers/SkipPage`, { params: { pageIndex: _this.PageIndex, filterKeyword: _this.filterKeyword } });  // Add 'await' keyword here
                        var model = response.data;

                        for (i = 0; i < model.length; i++) {

                            //var birItem = model[i].birthday;
                            model[i].birthday = _this.formatDate(model[i].birthday);
                            //model[i].TownList = [];
                            await _this.getTownList(model[i])
                        };
                        _this.CustomersViewModels = model;
                        //console.log('SkipPage成功');
                    } catch (error) {
                        alert(error.response.data)
                    }
                },
                isThisPage(n) {
                    return this.PageIndex === n;
                },
                formatDate(date) {
                    return new Date(date).toISOString().slice(0, 10);
                },
            },
            computed: {
                minPage: function () {
                    return this.PageIndex == 1;
                },
                maxPage: function () {
                    return this.PageIndex == this.MaxPage;
                },
                newCreateBtn: function () {
                    return Object.keys(this.newCustomerError).length > 0;
                },
            }
        });
    </script>
}