@section Styles{
	<style>
		thead {
			background-color: maroon;
			color: white;
		}
	</style>
}

<div id="app" class="container">

	
	<div class="form-group">
		@*篩選欄位*@
		<div class="row" style="width:50%;margin-left:auto;margin-right:0px">
			<label class="col-md-4">關鍵字:</label>
			<input class="col-md-8 form-control" placeholder="請輸入篩選關鍵字"
				   v-model="filter" @@keyup="filterPromotions">
		</div>
	</div>
	<div class="form-group">
		@*新增按鍵*@
		<button type="button" @@click="showInsertPage " class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#modalId">
			新增促銷選項
		</button>

	</div>
	<div class="form-group">
		<table class="table table-striped table-hover">
			<thead>
				<tr>
					<td>編輯</td>
					<td>PromotionId</td>
					<td>LevelId</td>
					<td>Name</td>
					<td>StartDate</td>
					<td>EndDate</td>
					<td>Discount</td>
				</tr>
			</thead>
			<tbody>
				<tr v-for="item in PromotionViewModel">
					<template v-if="item.Edit==true">
						<td>
							<button class="btn btn-success" @@click="update(item)">修改</button>
							<button class="btn btn-warning" @@click="cancel">取消</button>
						</td>
						<td>{{item.promotionId}}</td>
						<td><input v-model="item.levelId" /></td>
						<td><input v-model="item.name" /></td>
						<td><input v-model="item.startDate" /></td>
						<td><input v-model="item.endDate" /></td>
						<td><input v-model="item.discount" /></td>
					</template>
					<template v-else>
						<td>
							<button class="btn btn-primary" @@click="edit(item.promotionId)">編輯</button>
							<button class="btn btn-danger" @@click="deletePromotion(item.promotionId)">刪除</button>
						</td>
						<td>{{item.promotionId}}</td>
						<td>{{item.levelId}}</td>
						<td>{{item.name}}</td>
						<td>{{item.startDate}}</td>
						<td>{{item.endDate}}</td>
						<td>{{item.discount}}</td>
					</template>
				</tr>
			</tbody>
		</table>
	</div>
	<div class="form-group">
		@*新增加購服務選項畫面*@
		<div class="modal fade" id="insertPage" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog" aria-labelledby="modalTitleId" aria-hidden="true">
			<div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="modalTitleId">新增促銷選項</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<label class="form-label">LevelId:</label>
						<select class="form-control" v-model="levelId">
							<option v-for="item in LevelViewModel" :value="item.levelId">{{ item.levelId }}</option>
						</select>
						<div class="form-group">
							<label class="form-label">Name:</label>
							<input class="form-control" v-model="name" />
						</div>

						<div class="form-group">
							<label class="form-label">StartDate:</label>
							<input type="datetime-local" class="form-control" v-model="startDate" />
						</div>
						<div class="form-group">
							<label class="form-label">EndDate:</label>
							<input type="datetime-local" class="form-control" v-model="endDate" />
						</div>
						<div class="form-group">
							<label class="form-label">Discount:</label>
							<input class="form-control" v-model="discount" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
						<button type="button" @@click="insert" class="btn btn-primary">新增</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts{
	<script src="~/lib/vue/vue.min.js"></script>
	<script src="~/lib/axios/axios.min.js"></script>

	<script>
		let app = new Vue({
			el: '#app',
			data: {
				PromotionViewModel: [],
				LevelViewModel:[],
				filter: "",
				promotionId: "",
				levelId: "",
				name: "",
				startDate: "",
				endDate: "",
				discount: "",
				date:""
			},
			mounted: function () {
				let _this = this;
				_this.filterPromotions();
				_this.getLevel();
			},
			methods: {
				filterPromotions: function () {
					let _this = this;
					var request = {};
					request.PromotionId = isNaN(Number(_this.filter)) ? -1 : Number(_this.filter);
					request.LevelId = request.Name = request.StartDate = request.EndDate = request.Discount = _this.filter;
					axios.post('Promotions/FilterPromotions', request)
						.then(function (response) {
							//alert(JSON.stringify(response.data));
							_this.PromotionViewModel = response.data;
							var PromotionList = [];
							for (var i = 0; i < _this.PromotionViewModel.length; i++) {
								var item = _this.PromotionViewModel[i];
								item.Edit = false;
								PromotionList.push(item);
							}
							_this.PromotionViewModel = PromotionList;
						});
				},
				getLevel: function(){
					let _this=this;
					axios.get('Promotions/GetLevel')
						.then(function (response) {
							//alert(JSON.stringify(response.data));
							_this.LevelViewModel = response.data;
							
						});
				},

				update: function (item) {
					//alert("update");
					let _this = this;
					var request = {
						PromotionId: item.promotionId,
						LevelId: item.levelId,
						Name: item.name,
						StartDate: item.startDate,
						Enddate: item.endDate,
						Discount: item.discount
					};
					axios.put(`Promotions/PutPromotions?Id=${item.promotionId}`, request).then(response => {
						alert(response.data);
						_this.filterPromotions();
						//_this.cancel();

					});
				},
				cancel: function () {
					//alert("cancel");
					let _this = this;
					var PromotionList = [];
					for (var i = 0; i < _this.PromotionViewModel.length; i++) {
						var item = _this.PromotionViewModel[i];
						if (item.Edit == true) {
							item.Edit = false;
							item.levelId = _this.LevelId;
							item.name = _this.Name;
							item.startDate = _this.StartDate;
							item.endDate = _this.EndDate;
							item.discount = _this.Discount;
						}
						PromotionList.push(item);
					}
					_this.PromotionViewModel = PromotionList;
				},
				edit: function (promotionId) {
					//alert("edit");
					let _this = this;
					var PromotionList = [];
					for (var i = 0; i < _this.PromotionViewModel.length; i++) {
						var item = _this.PromotionViewModel[i];
						if (promotionId == item.promotionId) {
							item.Edit = true;
							_this.LevelId = item.levelId;
							_this.Name = item.name;
							_this.StartDate = item.startDate;
							_this.EndDate = item.endDate;
							_this.Discount = item.discount;
						}
						PromotionList.push(item);
					}
					_this.PromotionViewModel = PromotionList;
				},
				deletePromotion: function (promotionId) {
					//alert("delete");
					let _this = this;
					var x = _this.PromotionViewModel.find(p => p.promotionId == promotionId)
					var ret = confirm(`您確定要將${x.promotionId}-${x.name}刪除嗎?`);
					if (ret == true) {
						axios.delete(`Promotions/DeletePromotions?Id=${promotionId}`)
							.then(response => {
								var y = _this.PromotionViewModel.findIndex(p => p.promotionId == promotionId)
								_this.PromotionViewModel.splice(y, 1)
							});
					}
				},
				showInsertPage: function () {
					$('#insertPage').modal('show');
				},
				insert: function () {
					let _this = this;
					var prViewModel = {
						PromotionId: 0,
						LevelId: _this.levelId,
						Name: _this.name,
						StartDate: _this.startDate,
						EndDate: _this.endDate,
						Discount: _this.discount

					};
					axios.post('Promotions/PostPromotion', prViewModel).then(response => {
						alert(response.data);
						$('#insertPage').modal('hide');
						_this.filterPromotions();
					});
				},
			
						

			}
		});

	</script>

}